restartPolicy: Always

image:
  repository: githubfree/sql_exporter
  tag: latest
  pullPolicy: Always

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

nodeSelector: {}
tolerations: []
affinity: {}

secretConfig: true
config:
  global:
    scrape_timeout_offset: 500ms
    min_interval: 0s
    max_connections: 3
    max_idle_connections: 3

  target:
    data_source_name: 'sqlserver://prom_user:prom_password@dbserver1.example.com:1433'
    collectors: [mssql_standard]

  collectors:
    - collector_name: mssql_standard

      metrics:
        - metric_name: mssql_local_time_seconds
          type: gauge
          help: 'Local time in seconds since epoch (Unix time).'
          values: [unix_time]
          query: |
            SELECT DATEDIFF(second, '19700101', GETUTCDATE()) AS unix_time

        - metric_name: mssql_connections
          type: gauge
          help: 'Number of active connections.'
          key_labels:
            - db
          values: [count]
          query: |
            SELECT DB_NAME(sp.dbid) AS db, COUNT(sp.spid) AS count
            FROM sys.sysprocesses sp
            GROUP BY DB_NAME(sp.dbid)

        - metric_name: mssql_deadlocks
          type: counter
          help: 'Number of lock requests that resulted in a deadlock.'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Number of Deadlocks/sec' AND instance_name = '_Total'

        - metric_name: mssql_user_errors
          type: counter
          help: 'Number of user errors.'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Errors/sec' AND instance_name = 'User Errors'

        - metric_name: mssql_kill_connection_errors
          type: counter
          help: 'Number of severe errors that caused SQL Server to kill the connection.'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Errors/sec' AND instance_name = 'Kill Connection Errors'

        - metric_name: mssql_page_life_expectancy_seconds
          type: gauge
          help: 'The minimum number of seconds a page will stay in the buffer pool on this node without references.'
          values: [cntr_value]
          query: |
            SELECT top(1) cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Page life expectancy'

        - metric_name: mssql_batch_requests
          type: counter
          help: 'Number of command batches received.'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Batch Requests/sec'

        - metric_name: mssql_log_growths
          type: counter
          help: 'Number of times the transaction log has been expanded, per database.'
          key_labels:
            - db
          values: [cntr_value]
          query: |
            SELECT rtrim(instance_name) AS db, cntr_value
            FROM sys.dm_os_performance_counters WITH (NOLOCK)
            WHERE counter_name = 'Log Growths' AND instance_name <> '_Total'

        - metric_name: mssql_buffer_cache_hit_ratio
          type: gauge
          help: 'Ratio of requests that hit the buffer cache'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters
            WHERE [counter_name] = 'Buffer cache hit ratio'

        - metric_name: mssql_checkpoint_pages_sec
          type: gauge
          help: 'Checkpoint Pages Per Second'
          values: [cntr_value]
          query: |
            SELECT cntr_value
            FROM sys.dm_os_performance_counters
            WHERE [counter_name] = 'Checkpoint pages/sec'

        - metric_name: mssql_io_stall_seconds
          type: counter
          help: 'Stall time in seconds per database and I/O operation.'
          key_labels:
            - db
          value_label: operation
          values:
            - read
            - write
          query_ref: mssql_io_stall

        - metric_name: mssql_io_stall_total_seconds
          type: counter
          help: 'Total stall time in seconds per database.'
          key_labels:
            - db
          values:
            - io_stall
          query_ref: mssql_io_stall

        - metric_name: mssql_resident_memory_bytes
          type: gauge
          help: 'SQL Server resident memory size (AKA working set).'
          values: [resident_memory_bytes]
          query_ref: mssql_process_memory

        - metric_name: mssql_virtual_memory_bytes
          type: gauge
          help: 'SQL Server committed virtual memory size.'
          values: [virtual_memory_bytes]
          query_ref: mssql_process_memory

        - metric_name: mssql_memory_utilization_percentage
          type: gauge
          help: 'The percentage of committed memory that is in the working set.'
          values: [memory_utilization_percentage]
          query_ref: mssql_process_memory

        - metric_name: mssql_page_fault_count
          type: counter
          help: 'The number of page faults that were incurred by the SQL Server process.'
          values: [page_fault_count]
          query_ref: mssql_process_memory

        - metric_name: mssql_os_memory
          type: gauge
          help: 'OS physical memory, used and available.'
          value_label: 'state'
          values: [used, available]
          query: |
            SELECT
              (total_physical_memory_kb - available_physical_memory_kb) * 1024 AS used,
              available_physical_memory_kb * 1024 AS available
            FROM sys.dm_os_sys_memory

        - metric_name: mssql_os_page_file
          type: gauge
          help: 'OS page file, used and available.'
          value_label: 'state'
          values: [used, available]
          query: |
            SELECT
              (total_page_file_kb - available_page_file_kb) * 1024 AS used,
              available_page_file_kb * 1024 AS available
            FROM sys.dm_os_sys_memory

      queries:
        - query_name: mssql_io_stall
          query: |
            SELECT
              cast(DB_Name(a.database_id) as varchar) AS [db],
              sum(io_stall_read_ms) / 1000.0 AS [read],
              sum(io_stall_write_ms) / 1000.0 AS [write],
              sum(io_stall) / 1000.0 AS io_stall
            FROM
              sys.dm_io_virtual_file_stats(null, null) a
            INNER JOIN sys.master_files b ON a.database_id = b.database_id AND a.file_id = b.file_id
            GROUP BY a.database_id

        - query_name: mssql_process_memory
          query: |
            SELECT
              physical_memory_in_use_kb * 1024 AS resident_memory_bytes,
              virtual_address_space_committed_kb * 1024 AS virtual_memory_bytes,
              memory_utilization_percentage,
              page_fault_count
            FROM sys.dm_os_process_memory

resources: {}
  # limits:
  #   memory: 300Mi
  # requests:
  #   memory: 50Mi

service:
  annotations: {}
  type: ClusterIP
  port: 9399

## An Ingress resource can provide name-based virtual hosting and TLS
## termination among other things for CouchDB deployments which are accessed
## from outside the Kubernetes cluster.
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  hosts: []
     # - chart-example.local
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

podAnnotations: 
  prometheus.io/scrape: "true"
  prometheus.io/path: "/metrics"
  prometheus.io/port: "9399"

extraArgs: []
#  --history.limit=1000

replicas: 1
